// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  seiueId       Int             @id @unique
  schoolId      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String
  pinyin        String
  phone         String?
  avatar String
  adminClass0   String
  classTeacher0 String
  gender        Gender
  lastUserAgent String
  type          UserType
  logs          UserAuditLog[]
  appLogs       AppAuditLog[]
  auths         Authorization[]
  apps          Application[]
}

model Application {
  id           Int            @id @default(autoincrement())
  name         String
  icon         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  redirectUrls String[]
  scopes       Scope[]
  clientId     String
  clientSecret String
  owner        User           @relation(fields: [ownerId], references: [seiueId])
  ownerId      Int
  message      String
  approved     Boolean
  terms        String
  privacy      String
  logs         AppAuditLog[]
  auths        Authorization[]
}

model Authorization {
  id   Int  @id @default(autoincrement())
  user User @relation(fields: [userId], references: [seiueId])
  userId        Int
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId Int
}

model UserAuditLog {
  id     Int              @id @default(autoincrement())
  time   DateTime         @default(now())
  type   UserAuditLogType
  user   User             @relation(fields: [userId], references: [seiueId])
  userId Int
  values String[]
}

model AppAuditLog {
  id            Int             @id @default(autoincrement())
  time          DateTime        @default(now())
  type          AppAuditLogType
  application   Application     @relation(fields: [applicationId], references: [id])
  applicationId   Int
  operationUser User            @relation(fields: [operationUserId], references: [seiueId])
  operationUserId Int
  values          String[]
}

enum UserType {
  student
  teacher
}

enum UserAuditLogType {
  created // [User agent, IP address]
  logIn // [User agent, IP address]
  authorizedApp
  deauthorizedApp
}

enum AppAuditLogType {
  created
  updated
  authorizedUser
  approved
  disapproved
}

enum Scope {
  basic
  calendar
}

enum Gender {
  male
  female
  others
}
